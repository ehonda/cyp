-- Exercise 16-1 FOP SS18
data N = Z | S N

plus :: N -> N -> N
plus Z y = y
plus (S x) y = S (plus x y)

symdiff :: N -> N -> N
symdiff Z y = y
symdiff x Z = x
symdiff (S x) (S y) = symdiff x y


-- Goals
----------------------------------------

-- Lemma symdiff_sym (spec1):
goal symdiff x y .=. symdiff y x

-- Lemma symdiff_plus (spec2):
goal symdiff x (plus x y) .=. y



------------------------------------------------------------------------
-- Spec uniqueness
--    These lemmas could (if cyp had
--    predicate logic) be used to show
--    that the spec implies that if any
--    function conforms to it then it is
--    unique.
--    Since cyp doesn't haev predicate
--    logic we have to work around that
--    by defining axioms representing
--    the predicates of the implications
--    we want to prove. These can't be
--    used in any other proof
--    We refer to a function conforming
--    to the spec here as f_spec
------------------------------------------------------------------------

-- f_spec declaration
f_spec :: N -> N -> N

-- spec predicates
axiom spec1_pred: f_spec x y .=. f_spec y x
axiom spec2_pred: f_spec x (plus x y) .=. y


-- Lemma spec_unique_1 (su1):
--    spec2 => f_spec Z y = y
-----------------------------------------
goal f_spec Z y .=. y


-- Lemma spec_unique_2 (su2):
--        spec1, spec2 => f_spec y Z = y
--
--    Because we have spec2, we can
--    assume su1 here
--    <=> spec1, su1 => f_spec x Z = x
goal f_spec x Z .=. x



-- Lemma su3_case_y_geq_x:
--    Case y > x => ex z: y = x + z
--
--      spec1, spec2, y = x + z => 
--        f_spec (S x) (S y) = f_spec x y
--
--  <=> su1, su2, y = x + z =>
--        f_spec (S x) (S (x + z)) = f_spec x (x + z)
goal f_spec (S x) (S (plus x z)) .=. f_spec x (plus x z)


-- Lemma su3_case_x_geq_y:
--    Case x > y => ex z: x = y + z
goal f_spec (S (plus y z)) (S y) .=. f_spec (plus y z) y


-- Lemma spec_unique_4 (su4):
--      spec1, spec2 => 
--        f_spec (S x) (S y) = f_spec x y
--
--  <=> su1, su2 =>
--        f_spec (S x) (S y) = f_spec x y
goal f_spec (S x) (S y) .=. f_spec x y

