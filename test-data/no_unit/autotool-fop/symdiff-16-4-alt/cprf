------------------------------------------------------------------
-- Implementation conforms to spec
------------------------------------------------------------------

Lemma symdiff_sym: symdiff x y .=. symdiff y x

Proof by induction on x :: N generalizing y :: N
  Case Z
    For fixed y :: N
    Show: symdiff Z y .=. symdiff y Z

    Proof
                           symdiff Z y
      (by def symdiff) .=. y
      (by def symdiff) .=. symdiff y Z
    QED

  Case S x
    Fix x :: N
    Assume
      IH: forall y :: N: symdiff x y .=. symdiff y x
    
    Then for fixed y :: N
    Show: symdiff (S x) y .=. symdiff y (S x)

    Proof by case analysis on y :: N
      Case Z
        Assume
          AS: y .=. Z
        Then

        Proof
                               symdiff (S x) y
          (by AS)          .=. symdiff (S x) Z
          (by def symdiff) .=. S x
          (by def symdiff) .=. symdiff Z (S x)
          (by AS)          .=. symdiff y (S x)
        QED

      Case S y'
        Assume
          AS: y .=. S y'
        Then

        Proof
                               symdiff (S x) y
          (by AS)          .=. symdiff (S x) (S y')
          (by def symdiff) .=. symdiff x y'
          (by IH)          .=. symdiff y' x
          (by def symdiff) .=. symdiff (S y') (S x)
          (by AS)          .=. symdiff y (S x)
        QED
    QED
QED



Lemma symdiff_plus: symdiff x (plus x y) .=. y

Proof by induction on x :: N
  Case Z
    Show: symdiff Z (plus Z y) .=. y

    Proof
                           symdiff Z (plus Z y)
      (by def symdiff) .=. plus Z y
      (by def plus)    .=. y
    QED

  Case S x
    Fix x :: N
    Assume
      IH: symdiff x (plus x y) .=. y
    Then
    Show: symdiff (S x) (plus (S x) y) .=. y

    Proof
                           symdiff (S x) (plus (S x) y)
      (by def plus)    .=. symdiff (S x) (S (plus x y))
      (by def symdiff) .=. symdiff x (plus x y)
      (by IH)          .=. y
    QED
QED



------------------------------------------------------------------
-- Spec uniqueness
------------------------------------------------------------------

-- spec2 => f_spec Z y .=. y
-------------------------------------
Lemma spec_unique_1: f_spec Z y .=. y

Proof
                      f_spec Z y
  (by def plus)   .=. f_spec Z (plus Z y)
  (by spec2_pred) .=. y
QED



-- spec1, spec2 => f_spec x Z .=. x
-------------------------------------
Lemma spec_unique_2: f_spec x Z .=. x

Proof
                         f_spec x Z
  (by spec1_pred)    .=. f_spec Z x
  (by spec_unique_1) .=. x
QED



-- Lemma 3
-------------------------------------
Lemma su3_case_y_gt_x: f_spec (S x) (S (plus x z)) .=. f_spec x (plus x z)

Proof
                      f_spec (S x) (S (plus x z))
  (by def plus)   .=. f_spec (S x) (plus (S x) z)
  (by spec2_pred) .=. z
  (by spec2_pred) .=. f_spec x (plus x z)
QED


Lemma su3_case_x_gt_y: f_spec (S (plus y z)) (S y) .=. f_spec (plus y z) y

Proof
                           f_spec (S (plus y z)) (S y)
  (by spec1_pred)      .=. f_spec (S y) (S (plus y z))
  (by su3_case_y_gt_x) .=. f_spec y (plus y z)
  (by spec1_pred)      .=. f_spec (plus y z) y
QED


Lemma su3: f_spec (S x) (S y) .=. plus x y

Proof
f_spec (S x) (S y)
(by spec2_pred) .=. f_spec (S x) (S ( f_spec x (plus x y)  ))
QED
