-- Exercise 20-1 FOP SS18

-- List functions
----------------------------------------------------------

foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f init [] = init
foldr f init (x:xs) = f x (foldr f init xs)

map :: (a -> b) -> [a] -> [b]
map f [] = []
map f (x:xs) = (f x) : (map f xs)

(++) :: [a] -> [a] -> [a]
[] ++ ys = ys
(x:xs) ++ ys = x : (xs ++ ys)

app_1 :: a -> [a] -> [a]
app_1 x xs = xs ++ [x]

reverse :: [a] -> [a]
reverse [] = []
reverse (x:xs) = reverse xs ++ [x]

head :: [a] -> a
head (x:xs) = x

-- Inits
----------------------------------------------------------

-- m_i -> f_map_inits
m_i :: a -> [a] -> [a]
m_i x xs = x : xs

-- f_i -> f_fold_inits
f_i :: a -> [[a]] -> [[a]]
f_i x is = [] : (map (m_i x) is)

inits :: [a] -> [[a]]
inits xs = foldr f_i [[]] xs

-- Tails
----------------------------------------------------------

f_t :: a -> [[a]] -> [[a]]
f_t x ts = (x : (head ts)) : ts

tails :: [a] -> [[a]]
tails xs = foldr f_t [[]] xs

-- Goals
----------------------------------------------------------

-- Lemma inits_12:
goal inits [1, 2] .=. [[], [1], [1, 2]]

-- Lemma tails_12:
goal tails [1, 2] .=. [[1, 2], [2], []]

-- Lemma rev_inits_tails:
goal reverse (inits xs) .=. map reverse (tails (reverse xs))
