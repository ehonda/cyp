data Bool = False | True
data N = Z | S N

pred :: N -> N
pred Z = Z
pred (S x) = x

(==) :: N -> N -> Bool
Z == Z = True
Z == y = False
x == y = (pred x) == (pred y)

plus :: N -> N -> N
plus Z y = y
plus (S x) y = S (plus x y)

-- The 'weak' minus
--  wmin x y = 
--    if x > y
--    then x - y
--    else 0
wmin :: N -> N -> N
wmin Z y = Z
wmin (S x) y = if x == y then S Z else (if (wmin x y) == Z then Z else S (wmin x y)) 

symdiff :: N -> N -> N
symdiff x y = plus (wmin x y) (wmin y x)

-- Axioms
----------------------------------------
axiom plus_comm: plus x y .=. plus y x
axiom if_True: (if True then x else y) .=. x
axiom if_False: (if False then x else y) .=. y

-- Goals
----------------------------------------

-- Lemma wmin_Z_right_id:
goal wmin x Z .=. Z
