Lemma: filter p . map f .=. map f . filter (p . f)

Proof by extensionality with xs :: [a]

  Show: (filter p . map f) xs .=. (map f . filter (p . f)) xs

  Proof by induction on xs :: [a]

    Case []
      Show: (filter p . map f) [] .=. (map f . filter (p . f)) []

      Proof

                             (filter p . map f) []
        (by def .)       .=. filter p (map f [])
        (by def map)     .=. filter p []
        (by def filter)  .=. []

                             (map f . filter (p . f)) []
        (by def .)       .=. map f (filter (p . f) [])
        (by def filter)  .=. map f []
        (by def map)     .=. []

      QED

    Case y:ys
      Fix y :: a, ys :: [a]
      Assume
        IH: (filter p . map f) ys .=. (map f . filter (p . f)) ys
      Then
      Show: (filter p . map f) (y:ys) .=. (map f . filter (p . f)) (y:ys)

      Proof by case analysis on p (f y) :: Bool

        Case True
          Assume
            AS: p (f y) .=. True
          Then

          Proof

                                (filter p . map f) (y:ys)
            (by def .)      .=. filter p (map f (y:ys))
            (by def map)    .=. filter p (f y : map f ys)
            (by def filter) .=. if p (f y) then f y : filter p (map f ys) else filter p (map f ys)
            (by AS)         .=. if True then f y : filter p (map f ys) else filter p (map f ys)
            (by if_True)    .=. f y : filter p (map f ys)
            (by def .)      .=. f y : (filter p . map f) ys
            (by IH)         .=. f y : (map f . filter (p . f)) ys

                                (map f . filter (p . f)) (y:ys)
            (by def .)      .=. map f (filter (p . f) (y:ys))
            (by def filter) .=. map f (if (p . f) y then y : filter (p . f) ys else filter (p . f) ys)
            (by def .)      .=. map f (if p (f y) then y : filter (p . f) ys else filter (p . f) ys)
            (by AS)         .=. map f (if True then y : filter (p . f) ys else filter (p . f) ys)
            (by if_True)    .=. map f (y : filter (p . f) ys)
            (by def map)    .=. f y : (map f (filter (p . f) ys))
            (by def .)      .=. f y : (map f . filter (p . f)) ys
            

          QED

        Case False
          Assume
            AS: p (f y) .=. False
          Then

          Proof

                                (filter p . map f) (y:ys)
            (by def .)      .=. filter p (map f (y:ys))
            (by def map)    .=. filter p (f y : map f ys)
            (by def filter) .=. if p (f y) then f y : filter p (map f ys) else filter p (map f ys)
            (by AS)         .=. if False then f y : filter p (map f ys) else filter p (map f ys)
            (by if_False)   .=. filter p (map f ys)
            (by def .)      .=. (filter p . map f) ys
            (by IH)         .=. (map f . filter (p . f)) ys

                                (map f . filter (p . f)) (y:ys)
            (by def .)      .=. map f (filter (p . f) (y:ys))
            (by def filter) .=. map f (if (p . f) y then y : filter (p . f) ys else filter (p . f) ys)
            (by def .)      .=. map f (if p (f y) then y : filter (p . f) ys else filter (p . f) ys)
            (by AS)         .=. map f (if False then y : filter (p . f) ys else filter (p . f) ys)
            (by if_False)   .=. map f (filter (p . f) ys)
            (by def .)      .=. (map f . filter (p . f)) ys

          QED

      QED

  QED

QED
