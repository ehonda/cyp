Lemma itrev_rev: itrev xs ys .=. reverse xs ++ ys

Proof by induction on xs :: [a] generalizing ys :: [a]

Case [] -- base case
    For fixed ys :: [a]
    Show: itrev [] ys .=. reverse [] ++ ys

    Proof
                                itrev [] ys
        (by def itrev)      .=. ys

        reverse [] ++ ys
        (by def reverse)    .=. [] ++ ys
        (by def ++)         .=. ys
    QED

Case x:xs  -- induction step
    Fix x :: a, xs :: [a]
    Assume
        NOTIH: forall ys :: [a]: itrev xs ys .=. reverse xs ++ ys

    Then for fixed ys :: [a]
    Show: itrev (x:xs) ys .=. reverse (x:xs) ++ ys

    Proof
                                itrev (x:xs) ys
        (by def itrev)      .=. itrev xs (x:ys)
        (by IH1)            .=. reverse xs ++ (x:ys)

                                reverse (x:xs) ++ ys
        (by def reverse)    .=. (reverse xs ++ [x]) ++ ys
        (by app_assoc)      .=. reverse xs ++ ([x] ++ ys)
        (by def ++)         .=. reverse xs ++ (x : ([] ++ ys))
        (by def ++)         .=. reverse xs ++ (x:ys)
    QED

QED


Lemma app_Nil: xs ++ [] .=. xs

Proof by induction on xs :: [a]

Case []
    Show: [] ++ [] .=. []

    Proof
                                [] ++ []
        (by def ++)         .=. []
    QED

Case x:xs
    Fix x :: a, xs :: [a]
    Assume
        IH: xs ++ [] .=. xs

    Then 
    Show: (x:xs) ++ [] .=. (x:xs)

    Proof
                                (x:xs) ++ []
        (by def ++)         .=. x : (xs ++ [])
        (by IH)             .=. x : xs
    QED

QED


Lemma: itrev xs [] .=. reverse xs

Proof

                            itrev xs []
    (by itrev_rev)      .=. reverse xs ++ []
    (by app_Nil)        .=. reverse xs

QED
